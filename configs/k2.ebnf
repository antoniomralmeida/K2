Rule =  [  unconditionally then Consequent
		|  for any Class [ DynamicReference ]] if Expression then Consequent 
		|  when Expression then Consequent
		|  whenever Expression then Consequent
		|  initially Rule.


Expression =  { "("  } the Attribute [of ( DynamicReference | Object ) ]  \n
		(is 
		| equal 
		| less than [or equal] 
		| greater than [ or equal] 
		| different) 
		(ListType |Constant | Text) { ")" }  
		{[( and | or ) Expression ]}.


Consequent =   ( Set  
		| Inform
		| Create
		| Alter
		| Transfer 
		| Delete 
		| Insert 
		| Remove 
		| Change 
		| Move 
		| Rotate 
		| Show 
		| Hide 
		| Focus 
		| Halt 
		| Conclude  )
		{ and Consequent }.

Set = set the Attribute of ( DynamicReference | the ( Class | Object ) ) ("=" | to) Constant.

Inform = inform to the operator that Text \n [ {the Attribute of ( the Object | DynamicReference ) [Text]} ].

Conclude = conclude that the Attribute of Object is (ListType |Constant | Text).

Create = create ( a Class [(by cloning Class| whose parent is Class)]| an instance of the Class) named by Text.

Alter = alter Class { add Attribute}.

Attribute = Text as (string|date|number|list "(" Text {"," Text} ")") from "(" Source {"," Source} ")" [validity Number] [keephistory Number].

Source = (iot|user|simulation|inference).

Halt = halt with Text if breakpoints are enabled.

Transfer = transfer Object to Workspace.

Delete = delete Object.

Insert = insert Rule at the end of task-queue.

Remove = remove the first-task from task-queue.

Change = change the Object to Color.

Color = (red|blue|yellow|green).

Move = move the Object to "(" Constant "," Constant ")".

Rotate = rotate Object by Constant degrees.

Show = show Workspace.

Hide = hide Workspace.

Focus = focus on Object.